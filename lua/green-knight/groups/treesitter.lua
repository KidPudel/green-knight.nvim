local M = {}

function M.highlight(palette, opts)
	return {
		["@annotation"] = { fg = palette.white },
		["@attribute"] = { fg = palette.white },
		["@boolean"] = { fg = palette.red },
		["@character"] = { fg = palette.green },
		["@comment"] = { link = "Comment" },
		["@comment.documentation"] = { fg = palette.gray },
		["@comment.error"] = { fg = palette.red },
		["@comment.note"] = { fg = palette.gray },
		["@comment.todo"] = { fg = palette.yellow },
		["@comment.warning"] = { fg = palette.orange },
		["@const.builtin"] = { fg = palette.red },
		["@const.macro"] = { fg = palette.blue },
		["@constant"] = { fg = palette.white },
		["@constructor"] = { fg = palette.blue },
		["@diff.delta"] = {
			fg = palette.gray_blue,
			bg = palette.blue,
			bold = true,
		},
		["@error"] = { fg = palette.red },
		["@function"] = vim.tbl_extend("force", { fg = palette.blue }, opts.styles.functions),
		["@function.builtin"] = { fg = palette.blue },
		["@function.macro"] = { fg = palette.blue },
		["@function.method"] = { fg = palette.blue },
		["@function.method.call"] = { fg = palette.blue },
		["@keyword"] = vim.tbl_extend("force", { fg = palette.gray_blue }, opts.styles.keywords),
		["@keyword.conditional"] = { fg = palette.gray_blue },
		["@keyword.coroutine"] = { fg = palette.gray_blue },
		["@keyword.exception"] = { fg = palette.red },
		["@keyword.function"] = vim.tbl_extend("force", { fg = palette.gray_blue }, opts.styles.keywords),
		["@keyword.import"] = { fg = palette.red },
		["@keyword.operator"] = { fg = palette.gray_blue },
		["@keyword.repeat"] = { fg = palette.gray_blue },
		["@label"] = { fg = palette.white },
		["@lsp.type.comment"] = {},
		["@markup"] = { fg = palette.green_light },
		["@markup.italic"] = { italic = true },
		["@markup.link"] = { fg = palette.gray_blue },
		["@markup.list"] = { fg = palette.green_light },
		["@markup.list.unchecked"] = { fg = palette.green_light },
		["@markup.literal"] = { fg = palette.gray },
		["@markup.strong"] = { fg = palette.gray },
		["@markup.title"] = { fg = palette.gray },
		["@markup.underline"] = { underline = true },
		["@module"] = { fg = palette.white },
		["@number"] = { fg = palette.red },
		["@number.float"] = { fg = palette.red },
		["@operator"] = { fg = palette.white },
		["@property"] = { fg = palette.white },
		["@punctuation.bracket"] = { fg = palette.white },
		["@punctuation.delimiter"] = { fg = palette.white },
		["@string"] = { fg = palette.green_pale },
		["@string.escape"] = { fg = palette.green_pale },
		["@string.regexp"] = { fg = palette.green_pale },
		["@string.special.path"] = { fg = palette.green_pale },
		["@string.special.symbol"] = { fg = palette.gray },
		["@tag"] = { fg = palette.blue },
		["@tag.attribute"] = { fg = palette.white },
		["@tag.delimiter"] = { fg = palette.white },
		["@text.uri"] = { fg = palette.gray },
		["@type"] = vim.tbl_extend("force", { fg = palette.white }, opts.styles.type),
		["@type.builtin"] = { fg = palette.white },
		["@variable"] = vim.tbl_extend("force", { fg = palette.white }, opts.styles.variables),
		["@variable.builtin"] = { fg = palette.white },
		["@variable.field"] = { fg = palette.white },
		["@variable.parameter"] = { fg = palette.white },
		["@variable.parameter.reference"] = { fg = palette.white },
	}
end

return M
